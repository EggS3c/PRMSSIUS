#!/bin/bash

# Output file for the audit report
REPORT_FILE="password_audit_report.txt"

# ANSI color codes for formatting
COLOR_RESET="\e[0m"
COLOR_YELLOW="\e[93m"
COLOR_RED="\e[91m"
COLOR_GREEN="\e[92m"
COLOR_BRIGHT_NEON="\e[95m"  # Bright neon color
COLOR_CYAN="\e[96m"
COLOR_MAGENTA="\e[95m"
COLOR_BOLD="\e[1m"  # Bold text

# Function to display script banner
display_banner() {
    echo -e "${COLOR_BOLD}${COLOR_BRIGHT_NEON}"
    echo -e "  ██████╗ ██████╗ ███╗   ███╗███████╗███████╗██╗██╗   ██╗███████╗"
    echo -e "  ██╔══██╗██╔══██╗████╗ ████║██╔════╝██╔════╝██║██║   ██║██╔════╝"
    echo -e "  ██████╔╝██████╔╝██╔████╔██║███████╗██████╗  ██║██║   ██║███████╗"
    echo -e "  ██╔═══╝ ██╔══██╗██║╚██╔╝██║╚════██║╚════██╗██║██║   ██║╚════██║"
    echo -e "  ██║     ██║  ██║██║ ╚═╝ ██║███████║██████╔╝██║╚██████╔╝███████║"
    echo -e "  ╚═╝     ╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝╚═════╝ ╚═╝ ╚═════╝ ╚══════╝"
    echo -e "${COLOR_RESET}"
}

# Function to display script usage and help
display_help() {
    display_banner
    echo -e "-----------------------------------"
    echo -e "This script audits the strength of user passwords on a Linux system and optionally creates new users."
    echo -e ""
    echo -e "${COLOR_BOLD}Usage:${COLOR_RESET}"
    echo -e "   ./password_audit.sh [options]"
    echo -e ""
    echo -e "${COLOR_BOLD}Options:${COLOR_RESET}"
    echo -e "   ${COLOR_BOLD}-h, --help${COLOR_RESET}          Display this help message."
    echo -e "   ${COLOR_BOLD}-c, --create-user${COLOR_RESET}   Create a new user interactively after the audit."
    echo -e "   ${COLOR_BOLD}-r, --root-user${COLOR_RESET}     Create a temporary user with root privileges (use with extreme caution)."
    echo -e "   ${COLOR_BOLD}-p, --password-reset${COLOR_RESET} Reset a user's password interactively."
    echo -e "   ${COLOR_BOLD}-a, --hash-algorithm${COLOR_RESET} Specify the password hashing algorithm (e.g., sha256, sha512)."
    echo -e "   ${COLOR_BOLD}-o, --display-options${COLOR_RESET} Display selected script options at the end of the script."
    echo -e ""
    echo -e "${COLOR_BOLD}When to use:${COLOR_RESET}"
    echo -e "   - Use this script to audit the strength of passwords on your Linux system."
    echo -e "   - It helps identify weak or short passwords and provides recommendations."
    echo -e "   - You can also create new users with strong passwords interactively."
    echo -e "   - Run this script when you want to assess and improve password security."
    echo -e ""
    exit 0
}

# Function to check if a password is weak and provide recommendations
check_password_strength() {
    local user="$1"
    local password="$2"
    local min_length=8  # Minimum password length
    local recommended_length=12  # Recommended password length

    # Check if the user is "root" or the "current user"
    if [ "$user" == "root" ] || [ "$user" == "$USER" ]; then
        echo -e "$user\t${COLOR_BOLD}${COLOR_CYAN}Exempt${COLOR_RESET}\t$password (User-specific)" >> "$REPORT_FILE"
    else
        # Check if the password is too short
        if [ ${#password} -lt $min_length ]; then
            echo -e "$user\t${COLOR_BOLD}${COLOR_RED}Weak${COLOR_RESET}\t${COLOR_BRIGHT_NEON}$password${COLOR_RESET} (Consider a longer password) ${COLOR_BOLD}${COLOR_YELLOW}(Possible Privilege Escalation Risk)${COLOR_RESET}" >> "$REPORT_FILE"
        else
            echo -e "$user\t${COLOR_BOLD}${COLOR_GREEN}Strong${COLOR_RESET}\t${COLOR_BRIGHT_NEON}$password${COLOR_RESET}" >> "$REPORT_FILE"
        fi
    fi
}

# Function to create a new user
create_new_user() {
    local new_user="$1"
    local new_password="$2"

    # Check if the user already exists
    if id "$new_user" &>/dev/null; then
        echo -e "User '$new_user' already exists. Skipping user creation."
        return
    fi

    # Create the new user with the specified password
    sudo useradd -m -p "$(echo "$new_password" | openssl passwd -1 -stdin)" "$new_user"
    echo -e "User '$new_user' created."
}

# Function to create a temporary user with root privileges
create_root_user() {
    local root_user="$1"
    local root_password="$2"

    # Check if the user already exists
    if id "$root_user" &>/dev/null; then
        echo -e "User '$root_user' already exists. Skipping user creation."
        return
    fi

    # Create the temporary user with root privileges
    sudo useradd -m -p "$(echo "$root_password" | openssl passwd -1 -stdin)" "$root_user"
    sudo usermod -aG sudo "$root_user"  # Add to the sudo group to grant root privileges
    echo -e "Temporary user '$root_user' created with root privileges."
}

# Function to reset a user's password
reset_user_password() {
    local user="$1"
    local new_password="$2"

    # Check if the user exists
    if id "$user" &>/dev/null; then
        # Reset the user's password
        sudo passwd "$user" <<< "$new_password" > /dev/null 2>&1
        echo -e "Password for user '$user' reset."
    else
        echo -e "User '$user' does not exist. Password reset failed."
    fi
}

# Function to specify the password hashing algorithm
set_password_hash_algorithm() {
    local algorithm="$1"
    # Implement your logic to set the password hashing algorithm here
    # Example: Modify /etc/security/pwquality.conf to set the algorithm
    echo -e "Password hashing algorithm set to '$algorithm'."
}

# Function to display selected script options
display_selected_options() {
    echo -e "\nSelected Script Options:"
    echo -e "Create User: $CREATE_USER"
    echo -e "Create Root User: $CREATE_ROOT_USER"
    echo -e "Reset User Password: $RESET_PASSWORD"
    echo -e "Password Hashing Algorithm: $SET_HASH_ALGORITHM"
    echo -e "Display Options at the End: $DISPLAY_OPTIONS"
    echo -e "You can specified the flags of the script (example ./password_audit_report.sh -0 -"
}

# Function to perform the password audit
password_audit() {
    display_banner
    echo -e "${COLOR_BOLD}${COLOR_MAGENTA}Password Audit Report${COLOR_RESET}\nMinimum Password Length: 8 characters\nRecommended Password Length: 12 characters or more\n" > "$REPORT_FILE"
    echo -e "User\t\tStatus\t\tPassword" >> "$REPORT_FILE"

    while IFS=':' read -r user password _; do
        if [ "$user" != "root" ] && [ "$user" != "nobody" ]; then
            check_password_strength "$user" "$password"
        else
            echo -e "$user\t${COLOR_BOLD}${COLOR_BRIGHT_NEON}System${COLOR_RESET}\tSystem-created user" >> "$REPORT_FILE"
        fi
    done < "/etc/shadow"
}

# Check if the script is run as root
if [ "$EUID" -ne 0 ]; then
    echo -e "${COLOR_BOLD}${COLOR_RED}Please run this script as root or with sudo.${COLOR_RESET}"
    exit 1
fi

# Get the current user
USER="$(whoami)"

# Initialize option variables
CREATE_USER=false
CREATE_ROOT_USER=false
RESET_PASSWORD=false
SET_HASH_ALGORITHM=""
DISPLAY_OPTIONS=false

# Check for script options
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -h|--help)
            display_help
            ;;
        -c|--create-user)
            CREATE_USER=true
            ;;
        -r|--root-user)
            CREATE_ROOT_USER=true
            ;;
        -p|--password-reset)
            RESET_PASSWORD=true
            ;;
        -a|--hash-algorithm)
            SET_HASH_ALGORITHM="$2"
            shift
            ;;
        -o|--display-options)
            DISPLAY_OPTIONS=true
            ;;
        *)
            echo -e "${COLOR_BOLD}${COLOR_RED}Unknown option: $1${COLOR_RESET}"
            display_help
            ;;
    esac
    shift
done

# Run the password audit
password_audit

# Display the audit report
cat "$REPORT_FILE"

echo -e "${COLOR_BOLD}${COLOR_YELLOW}Password audit completed. Report saved in '$REPORT_FILE'.${COLOR_RESET}"

# Prompt to create a new user
if [ "$CREATE_USER" == "true" ]; then
    read -p "Do you want to create a new user? (y/n): " create_user_option

    if [ "$create_user_option" == "y" ]; then
        read -p "Enter the username for the new user: " new_user
        read -p "Enter the password for the new user: " -s new_password
        echo
        create_new_user "$new_user" "$new_password"
    fi
fi

# Create a temporary user with root privileges if specified
if [ "$CREATE_ROOT_USER" == "true" ]; then
    read -p "Create a temporary user with root privileges? (use with extreme caution) (y/n): " create_root_user_option

    if [ "$create_root_user_option" == "y" ]; then
        read -p "Enter the username for the temporary root user: " root_user
        read -p "Enter the password for the temporary root user: " -s root_password
        echo
        create_root_user "$root_user" "$root_password"
    fi
fi

# Reset a user's password if specified
if [ "$RESET_PASSWORD" == "true" ]; then
    read -p "Reset a user's password? (y/n): " reset_password_option

    if [ "$reset_password_option" == "y" ]; then
        read -p "Enter the username for the user whose password you want to reset: " reset_user
        read -p "Enter the new password for the user: " -s new_password
        echo
        reset_user_password "$reset_user" "$new_password"
    fi
fi

# Set the password hashing algorithm if specified
if [ -n "$SET_HASH_ALGORITHM" ]; then
    set_password_hash_algorithm "$SET_HASH_ALGORITHM"
fi

# Display selected script options if specified
if [ "$DISPLAY_OPTIONS" == "true" ]; then
    display_selected_options
fi

